---
title: "TypiTarget pilot data analysis"
  format: html
  editor: visual
---


```{r echo=FALSE, message=TRUE, warning=TRUE}

library(pacman)
p_load(knitr, dplyr, gsubfn, tidyr, ggplot2, ggpubr, afex, emmeans, purrr, cowplot, stringr, apa)

dirs <- list()
dirs$main <- "C:/Users/User/TypiTarget_analysis/"


dirs$functions <- paste0(dirs$main, "functions/")
dirs$analysis  <- paste0(dirs$main, "TypiTarget_analysis/code/")
dirs$data      <- paste0(dirs$main, "data/")
dirs$plots     <- paste0(dirs$main, "TypiTarget_analysis/plots/")

vars                 <- list()
vars$categories      <- c("bedroom", "kitchen", "living room")
vars$odd_rt_min      <- 200 # consider only RTs faster than this.
vars$odd_rt_max      <- 2000   # consider only RTs slower than this. 
vars$cat_ntrials_min <- 10  # minimum number of trials; otherwise: bad
vars$mem_dprime_min  <- -99 # -99 effectively means: any d' value counts 
vars$mem_ntrials_min <- 10  # minimum number of trials; otherwise: bad

logfile_list <- list.files(path = dirs$data, pattern = "\\.csv$", full.names = TRUE)
 # Initialize an empty data frame
all_data <- data.frame()

  # Loop through the files and read only the columns of interest.
  for (file in logfile_list) {

    print(sprintf('Reading file: %s.', file))

    # Read the file
    data <- read.csv(file, stringsAsFactors = FALSE)
    data$p_typicality <- as.double(data$p_typicality)
    # Append this dataset to the other datasets.
    all_data <- bind_rows(all_data, data)
  }

# all_data <- read.csv(file = file.path(dirs$data,
#                       "TypT_full_4.csv"),
#                        stringsAsFactors = FALSE)

prep_data <- all_data %>%
  mutate(
    RT = RT * 1000
  ) %>%
  mutate(
    category = str_replace_all(category, c("living_rooms"="living room", "kitchens"="kitchen", "bedrooms"="bedroom"))
  )

prep_data <- prep_data %>%
  mutate(typicality = case_when(p_typicality == 0 ~ NA, 
                                p_typicality <= 5 ~ "low", 
                                p_typicality > 5 ~ "high",
                                ))

```

```{r echo=FALSE, message=TRUE, warning=TRUE}

# ------------------------------------------------------------------------------
# Preprocessing und data summary. We first process the data to flag bad
# subjects. A subject is defined as "bad" if any of the following rules applies:
# -   d' in the memory task is lower than `r vars$mem_dprime_min`
# ------------------------------------------------------------------------------
source(file.path(dirs$functions, "fn_summarize_mem_accuracy.R"))
source(file.path(dirs$functions, "fn_target_RT.R"))


# ..............................................................................
# MEMORY: accuracy and flag bad subjects.
# ..............................................................................
summary_mem_accuracy <- fn_summarize_mem_accuracy(prep_data, vars)


# ..............................................................................
# Merge all summaries.
# ..............................................................................
summary_all <- reduce(list(summary_mem_accuracy), full_join, by = c("participant", "typicality", "category"))
summary_all <- summary_all %>% filter(!is.na(participant))
summary_all <- summary_all %>% filter(ImgDur == 0.5)

library(viridis)
library(hrbrthemes)
# plot_mem_accuracy <- ggplot(summary_all, aes(x=typicality, y=mem_dprime, fill=typicality)) +
#                       geom_violin() +
#     scale_fill_viridis(discrete = TRUE, alpha=0.6, option="A") +
#     theme_classic(base_size = 10) +
#     theme(
#       legend.position="none",
#       plot.title = element_text(size=11)
#     ) +
#     ggtitle("Violin chart") +
#     xlab("")

plot_mem_accuracy_dist <- ggplot(summary_all, aes(x=typicality, y=mem_dprime, fill=typicality)) +
    geom_boxplot() +
    scale_fill_viridis(discrete = TRUE, alpha=0.6) +
    geom_jitter(color="black", size=0.4, alpha=0.9) +
    theme_classic(base_size = 10) +
    theme(
      legend.position="none",
      plot.title = element_text(size=11)
    ) +
    ggtitle("") +
    xlab("")
print(plot_mem_accuracy_dist)



anova_mem_acc <- aov_ez(id="participant", dv="mem_dprime", summary_all, within = c("typicality", "category"))#, between = "ImgDur")
nice(anova_mem_acc, es = "pes", "correction" = "GG")
anova_apa(anova_mem_acc, es=c("petasq"), sph_corr=c("greenhouse-geisser"))
color_turbo <- c( "#2DB6F1FF", "#B11901FF")
plot_mem_accuracy <- afex_plot(anova_mem_acc, x = "typicality", trace = "category", error = "within", mapping = c("shape", "color"),
                               data_geom = geom_violin) +
                     labs(title = "Memory\nAccuracy", x = "Typicality", y = "d'") +
                         theme_classic(base_size = 10) +
                           theme(plot.title = element_text(size=10)) +
                               theme(legend.position="bottom")
print(plot_mem_accuracy)
plot_mem_accuracy_img_dur <- afex_plot(anova_mem_acc, x = "typicality", trace = "ImgDur", error = "none", mapping = c("shape", "color"),
                               data_geom = geom_violin) +
                           labs(title = "Memory\nAccuracy", x = "Typicality", y = "d'") +
                              theme_classic(base_size = 10) +
                               theme(plot.title = element_text(size=10)) +
                               theme(legend.position="bottom")
print(plot_mem_accuracy_img_dur)


```


```{r echo=FALSE, message=TRUE, warning=TRUE}
# ..............................................................................
# target detection rate
# ..............................................................................

```


```{r echo=FALSE, message=TRUE, warning=TRUE}

# ..............................................................................
# isolation spread effect
# compute position of images before and after targets or nontargets
# do we see an effect of this position in such a way that images in this 
# position are remembered better?
# ..............................................................................

# filter for task oddball, and filter for images in categories
# divide in images of desired position and all others to compare memory d'
source(file.path(dirs$functions, "fn_isolation_spread.R"))

summary_isolation_spread <- fn_isolation_spread(prep_data, vars)
plot_iso_spread <- ggplot(summary_isolation_spread) + aes(x=typicality, y=mem_dprime, colour = as.factor(iso_spread)) + geom_point()
plot_iso_spread <- ggplot(summary_isolation_spread) + aes(x=typicality, y=mem_dprime, fill=as.factor(iso_spread)) +
    geom_boxplot() +
    scale_fill_viridis(discrete = TRUE, alpha=0.6) +
    # geom_jitter(color="black", size=0.4, alpha=0.9) +
    theme_classic(base_size = 10) +
    theme(
      legend.position="bottom",
      plot.title = element_text(size=11)
    ) +
    ggtitle("") +
    xlab("")
print(plot_iso_spread)

```

```{r echo=FALSE, message=TRUE, warning=TRUE}
# ..............................................................................
# isolation spread divided by target and nontarget
# ..............................................................................

for (i in 1:length(prep_data$filename)) {
  
  if (prep_data$iso_spread[i] == 1 & prep_data$category[i-1] == "nontarget" | prep_data$category[i+1] == "nontarget") { # account for first and last item in the list
    iso_spread_nontarget = 1
  } else {iso_spread_nontarget = 0}
}

```